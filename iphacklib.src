//command: iphacklib

local = false
current_files = get_shell.host_computer.File(current_path).get_files
lib_files = get_shell.host_computer.File("/lib").get_files
for file in current_files
  if file.name == "metaxploit.so" then 
    local = true
    metax = include_lib(current_path + "/metaxploit.so")
  end if
end for
if local == false then
  for file in lib_files
    if file.name == "metaxploit.so" then metax = include_lib("/lib/metaxploit.so")
  end for
end if

if params[0] == "-h" or params[0] == "--help" then
 exit("<b>Usage: ipscanlib [ip address]</b>")  
end if
if is_lan_ip(params[0]) then 
  router = get_router
  ports = router.device_ports(params[0])
  lan = true
else
  router = get_router(params[0])
  ports = router.used_ports
end if

if ports.len != 0 then 
  info = "INDEX PORT STATE SERVICE VERSION LAN"  
  index = 0
  info = info + "\n" + "0: router open kernel_router " + router.kernel_version + " " + router.local_ip
  for port in ports
     index = index+1
     service_info = router.port_info(port)
     lan_ips = port.get_lan_ip
     port_status = "open"
  
     if port.is_closed then
        port_status = "closed"
     end if
     info = info + "\n" + index + ": " + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
  end for
  print(format_columns(info) + "\n")
  
  inputOk = false
  while inputOk == false
  pindex = user_input("Choose port to hack:").to_int
  if pindex == 0 then
    inputOk = true
    netSession = metax.net_use(params[0], 0)
  else if  pindex <= index then
    inputOk = true
    netSession = metax.net_use(params[0], ports[pindex-1].port_number)
  else
    print "Index not found"
  end if
  end while
else
  print "No ports found. Scanning router"
  netSession = metax.net_use(params[0], 0)
end if
lib = netSession.dump_lib
print "Scanning " + lib.lib_name[:-3] + " " + lib.version
listMem = metax.scan(lib)
inputOk = false
option = ""
while( not inputOk )
  index = 1
  for itemMem in listMem
    print(index +": [" + itemMem + "]")
    index = index + 1
  end for
  if listMem.len == 0 then 
    exit("Scan completed: No issues detected.")
  else
    option = user_input("Select memory index: ").to_int
    print("Scanning for vulnerabilities at memory zone: " + listMem[option - 1])
    print("Scan completed: detected issues in " + listMem.len + " memory zones.")
    if typeof(option) != "number" or (option < 1 or option > listMem.len) then
      print("Invalid input. Type a valid number")
    else 
      inputOk = true
    end if
  end if

  
  print(metax.scan_address(lib, listMem[option - 1]))
  MemAddr = listMem[option - 1]
  print "To return to mem zone list enter 0"
  unsecv = user_input("Unsecure Value:")
  if unsecv == "0" then inputOk = false
  
end while

result = lib.overflow(MemAddr, unsecv)
type = typeof(result)
if type != "shell" and type != "file" and type != "computer" then 
  conf  = user_input("Is extra info required(y/n):")
  if conf == "n" then exit("Error: This type is not supported.")
  xtrainfo = user_input("Extra info:")
  result = lib.overflow(MemAddr, unsecv, xtrainfo)
end if
type = typeof(result)
if type == "shell" then result.start_terminal
if type == "file" then
    current = result
    stop = false
    while stop == false
    if current.is_folder then
      flist = current.get_files + current.get_folders
      info = "INDEX NAME TYPE"
      index = 1
      for file in flist
        isfolder = "file"
        if file.is_folder then isfolder = "folder"
        info = info + "\n" + index + ": " + file.name + " " + isfolder
        index = index + 1
      end for
      print(format_columns(info) + "\n")
      print "to return to original path type 'return'"
      print "to exit type 'exit'"
      conf = user_input("Choose index to check:").to_int
      if conf == "exit" then exit()
      if conf == "return" then 
        current = result
      else
        current = flist[conf - 1]
      end if 
    end if
    if (not current.is_folder) then
      print "Downloading file " + current.name
      startformat = indexOf(current.name, ".")
      fileLocation = "/home/"+active_user
      createFile = get_shell.host_computer.File(fileLocation+"/stolen_file" + current.name[startformat:])
      if createFile then createFile.delete  
      get_shell.host_computer.touch(fileLocation, "stolen_file" + current.name[startformat:])  
      print current.get_content
      print "File downloaded to /home/"+active_user+"/stolen_file" + current.name[startformat:]
      get_shell.host_computer.File("/home/"+active_user+"/stolen_file" + current.name[startformat:]) = current.get_content
      current = current.parent
      user_input("Enter any key to continue:", false, true)

    end if
    end while
end if
if type == "computer" then  
  print("trying to get passwords")
  passFile = result.File("/etc/passwd")
  if not passFile then exit("Password file is missing.")
  if passFile.has_permission("r") then
    if passFile == null then print("Password file is empty.")
    fileLocation = "/home/"+active_user
    createFile = get_shell.host_computer.File(fileLocation+"/receivedPaswd.txt")
    if createFile then createFile.delete  
    get_shell.host_computer.touch(fileLocation, "receivedPaswd.txt")  
    get_shell.host_computer.File(fileLocation+"/receivedPaswd.txt").set_content(result.File("/etc/passwd").get_content)    
    createFile = get_shell.host_computer.File(fileLocation+"/receivedPaswd.txt")
    if createFile == null then
      createFile.delete
      print "Downloaded password file is empty."
    while true
      print("Options: ")
      print("1. Decipher")
      print("0. Exit")
      opt = user_input("Option: ")
      if opt == "0" then break
      if opt == "1" then
        get_shell.launch("/bin/decipher", "f " + fileLocation + "/receivedPaswd.txt")
      end if
    end while
    end if
  else
    print "Unable to access password file"
  end if
  
  print "trying to get Email"
  users = result.File("/home").get_folders
  nusers = []
  for user in users
    nusers.push(user.name)
  end for
  users = nusers
  Check = false
  while Check == false
  uind = 1
  print "0: EXIT"
  for user in users
    print uind + ": " + user
    uind = uind + 1
  end for
  userid = user_input("Choose user:").to_int
  user = users[userid - 1]
  mailfile = result.File("/home/"+user+"/Config/Mail.txt")
  if mailfile then
    if mailfile.has_permission("r") then
      if passFile == null then print "Mail file is empty."
      fileLocation = "/home/"+active_user
      createFile = get_shell.host_computer.File(fileLocation+"/receivedMail.txt")
      if createFile then createFile.delete  
      get_shell.host_computer.touch(fileLocation, "receivedMail.txt")  
      get_shell.host_computer.File(fileLocation+"/receivedMail.txt").set_content(result.File("/home/"+user+"/Config/Mail.txt").get_content)
      createFile = get_shell.host_computer.File(fileLocation+"/receivedMail.txt")
      if createFile == null then
        createFile.delete
        print "Downloaded mail file is empty."
      end if
      while true
        print("Options: ")
        print("1. Decipher")
        print("0. Exit")
        opt = user_input("Option: ")
        if opt == "0" then Check = true
        if opt == "1" then get_shell.launch("/bin/decipher", "f " + fileLocation + "/receivedMail.txt")
        Check = true
      end while
    end if
  else
    print "Unable to access mail file"
  end if
  end while
end if
print("<color=#1502ED>DONE</color>")