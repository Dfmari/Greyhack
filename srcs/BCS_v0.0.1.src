
//command hxr
//IMPORTS
crypto = include_lib("/lib/crypto.so")
if not crypto then
    crypto = include_lib(current_path + "/crypto.so")
end if
if not crypto then exit("<color=red>Fatal Error: Can't find crypto.so library in the /lib path or the current folder")

metax = include_lib("/lib/metaxploit.so")
if not metax then
    metax = include_lib(current_path + "/metaxploit.so")
end if
if not metax then exit("<color=red>Fatal Error: Can't find metaxploit.so library in the /lib path or the current folder")
//FUNCTIONS------------------------------------------------------
//title - clears screen and shows PORTHACK title
//ip_ports - returns a list of used ports on given ip address
//nmap(ipAddr) -  returns indexed info about used ports on given ip address
//get_lib(ipAddr, port) - returns library used on given port of given ip address as metalib
//ask_port(ipAddr) - asks user to choose port on given ip address and returns chosen port as port
//get_devinf(ipAddr, port) - returns info list[num_conn_gateway, num_portforward, num_users, (r - root user is active/y - non-root user is active/n - no users active)] for device on given port
//allIndexes(text, value) - returns a list of indexes of all instances of value in text
//ask_ip - asks user for ip address returns given ip address
//get_unsecs(lib) - returns unsecure values from given memory address of given lib
//ask_memAddr(lib) - asks user to choose a memory address from given lib
//choose_vuln(lib) - shows user available vulnerabilities in given lib and returns a list of data ([vuln_type, memAddr, unsec_value, lib, output]) about chosen vulnerability 
//get_passwords(file, root=false) - deciphers all passwords for all users in given file and returns a list [[user, pass], [user, pass], ...](if root==true will try to only decipher root pass)
//hack_computer(computer) - gives user ability to use some hacking tools against given computer 
//ask_lib - asks user to choose a lib from /lib directory
//help - shows user guide for Hax0r tool


title = function()//clears screen and shows title
	clear_screen
	//https://manytools.org/hacker-tools/ascii-banner/
	                                                                                                    
                                                                                                    
print"<color=green>---------------------------------------------"
print"<color=green>Face_the_very_stoppable"
print"<color=green>---------------------------------------------" 
print"<color=green>______  ______          _____              _____"  
print"<color=green>\     \|\     \    _____\    \_       _____\    \ "
print"<color=green> |     |\|     |  /     /|     |     /    / \    |"
print"<color=green> |     |/____ /  /     / /____/|    |    |  /___/|"
print"<color=green> |     |\     \ |     | |____|/  ____\    \ |   ||"
print"<color=green> |     | |     ||     |  _____  /    /\    \|___|/"
print"<color=green> |     | |     ||\     \|\    \|    |/ \    \     "
print"<color=green>/_____/|/_____/|| \_____\|    ||\____\ /____/|    "
print"<color=green>|    |||     | || |     /____/|| |   ||    | |    "
print"<color=green>|____|/|_____|/  \|_____|    || \|___||____|/     "
print"<color=green>                        |____|/                   "
print"<color=green>---------------------------------------------"
print"<color=green>Balls_cutting_systemâ„¢"
print"<color=green>Mostly_by_Dfmari(chmo)(with_oluh's(wer2403)_help)_;()"
print"<color=green>---------------------------------------------"                           
end function


ip_ports = function(ipAddr)//returns a list of used ports on given ip address
	if is_lan_ip(ipAddr) then 
        router = get_router
        ports = router.device_ports(ipAddr)
        lan = true
    else
        router = get_router(ipAddr)
        ports = used_ports(router)
    end if
	return [0] + ports
end function

nmap = function(ipAddr) // returns indexed info about used ports on given ip address
    if is_lan_ip(ipAddr) then 
        router = get_router
        ports = router.device_ports(ipAddr)
        lan = true
    else
        router = get_router(ipAddr)
        ports = used_ports(router)
    end if
    
    info = "INDEX PORT STATE SERVICE VERSION LAN"  
    info = info + "\n" + "0: router open kernel_router " + kernel_version(router) + " " + local_ip(router)
    if len(ports) != 0 then 
        index = 0
        for port in ports
            index = index+1
            service_info = router.port_info(port)
            lan_ips = port.get_lan_ip
            port_status = "open"
    
            if port.is_closed then
                port_status = "closed"
            end if
        info = info + "\n" + index + ": " + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
        end for
        return (format_columns(info) + "\n")
    else
        return (format_columns(info) + "\n")
    end if
    
end function


get_lib = function(ipAddr, port)//returns library used on given port of given ip address as metalib
	if typeof(port) != "number" then
		session = metax.net_use(ipAddr, port.port_number)
	else
		session = metax.net_use(ipAddr, port)
	end if 
	lib = dump_lib(session)	
	return lib
end function


ls = function(computer, ls_path, index=0, recursive=false, perms=false)//lists files in given path can be recursively and can show permissions of files
    output = ""
    ls_file = computer.File(ls_path)
    files = ls_file.get_files
    folders = ls_file.get_folders
    if recursive == true then
        for file in files
            info = ("-" * index) + file.name + " FILE"
            if perms == true then info = info + " " + file.permissions
            output = output + info + "\n"
        end for
        for folder in folders
            output = output + ("+" * index) + folder.name + " DIR:" + "\n"
            print format_columns(output)
            output = ""
            ls(computer, folder.path, index+1, recursive, perms)
        end for

    else 
        for file in files
            info = file.name + " FILE"
            if perms == true then info = info + " " + file.permissions
            output = output + info + "\n"
        end for

        for folder in folders
            info = folder.name + " DIR"
            if perms == true then info = info + " " + folder.permissions
            output = output + info + "\n"
        end for
    end if
    print format_columns(output)   
end function


ask_port = function(ipAddr)//asks user to choose port on given ip address and returns chosen port as port
	ports = ip_ports(ipAddr)
    print ports
	inputOK = false
	while (not inputOK)
		print nmap(ipAddr)
		index = user_input("Choose port:").to_int
		if index > ports.len or index < 0 then
			print "<color=orange>Input Error: Index not found<color>"
		else
			port = ports[index]
			if port or port == 0 then
					inputOK = true 
			end if
		end if
	end while
	return port
end function


get_devinf = function(ipAddr, port)//returns info list[num_conn_gateway, num_portforward, num_users, (r - root user is active/y - non-root user is active/n - no users active)] for device on given port
    session = metax.net_use(ipAddr, port.port_number)
    num_conn_gateway = session.get_num_conn_gateway
    num_portforward = session.get_num_portforward
    num_users = session.get_num_users
    users = "n"
    if session.is_root_active_user then
        users = "r"
    else if session.is_any_active_user then
        users = "y"
    end if
    info = [num_conn_gateway, num_portforward, num_users, users]
    return info
end function


allIndexes = function(text, value)//returns a list of indexes of all instances of value in text
    idxs = []
    lidx = 1
    summ = 0
    while indexOf(text[lidx:], value) != null
	    idx = indexOf(text[lidx:], value)
	    summ = idx + summ + 1
	    idxs = idxs + [summ]
	    lidx = lidx + idx + 1
end while
    return idxs
end function


startup = function()//shows startup menu and returns chosen option
	// Font: Ogre                                                           
 print"<color=green>   _____ __  ____________   __  _________________"
 print"<color=green>   / ___ / / / /  _/_  __/  / / / /  _/_  __/ ___/"
 print"<color=green>   \__ \/ /_/  / /  / /    / /_/  / /  / /  \__ \ "
 print"<color=green>  ___/ / __   / /  / /    / __   / /  / /  ___/ / "
 print"<color=green> /____/_/ /_/___/ /_/    /_/ /_/___/_/_/  /____/  "
 print"<color=green>    /   |        / ____/   |  / | / /             "
 print"<color=green>   / /| |       / /_  / /| | /  |/ /              "
 print"<color=green>  / ___ |      / __/ / ___ |/ /|  /               "
 print"<color=green> /_/  |_|     /_/   /_/  |_/_/ |_/                "
	
    type_check = true
    while type_check == true
		print "1) Local Hack"
        print "2) Port Hack"

		type = user_input("Choose option:").to_int
        if type == 1 or type == 2 then
            startup = true
            while startup == true
                print "1) Direct Hack"
		        print "2) Scan Hack"
		        print "3) Help" 
                option = user_input("Choose option:").to_int
                if option == 1 or option == 2 or option == 3 or option == 4 then
                    startup = false
                else
                    print "<color=orange>Input Error: Option not found"
                end if 
            end while
            type_check = false
        else
            print "<color=orange>Input Error: Option not found"
        end if 

    end while
	return [option, type]
end function


ask_ip = function()//asks user for ip address returns given ip address
	check = false
	while check == false
		ipAddr = user_input("<b>Input IP address:</b>")
		if is_valid_ip(ipAddr) == 1 then	
			check = true
		else 
			print("<color=orange>Input Error: IP address is not valid</color>")
		end if 
	end while
    return ipAddr
end function


get_unsecs = function(lib, memAddr)//returns unsecure values from given memory address of given lib
	raw = metax.scan_address(lib, memAddr)
	vuln_ids = allIndexes(raw, "Unsafe check:")
	unsecs = []
	for vuln_id in vuln_ids
		vuln = raw[vuln_id:]
		unsec_start_id = indexOf(vuln, "<b>")+3
		unsec_end_id = indexOf(vuln, "</b>")
		unsec = vuln[unsec_start_id:unsec_end_id]
		unsecs.push(unsec)
	end for
	return unsecs
end function


ask_memAddr = function(lib, mems = null)//asks user to choose a memory address from given lib
    memcheck = false
	if mems == null then
        print("Scanning " + lib_name(lib) + " " + version(lib) + " ...")
		memcheck = true
        mems = metax.scan(lib)
    end if
	check = false
    while check == false
        index = 1
        for memAddr in mems
            print index + ") " + "[" + memAddr + "]"
            index = index + 1
        end for
        answer = user_input("Choose memory address:").to_int
        if typeof(answer) == "number" and answer <= (mems.len + 1) then
            check = true
            memAddr = mems[answer - 1]
        else 
            print "<color=orange>Input Error: Option not found"
        end if
    end while
	if memcheck == true then
		return [memAddr, mems]
	else
    	return memAddr
	end if 
end function



choose_vuln = function(lib)//shows user available vulnerabilities in given lib and returns a list of data ([vuln_type, memAddr, unsec_value, lib, output]) about chosen vulnerability 
    check = false
	mems = null
	memcheck = true
    while check == false 
        memAddr = ask_memAddr(lib, mems)
		if memcheck == true then 
			mems = memAddr[-1]
			memAddr = memAddr[0]
			memcheck = false
		end if 
	    results = []
	    unsecs = get_unsecs(lib, memAddr)
	    print "[" + memAddr + "]" + "<b>-----------------------------</b>"
        index = 1
        vulns = []
	    for unsec in unsecs
            print "	"
            print "[" + index + "]" + "-------------------"
	    	output = lib.overflow(memAddr, unsec)
            type = typeof(output)
		    if typeof(output) == "null" then
			    type = "FAIL"
	        end if
		    print "	"
	       	print "Unsecure value: " + unsec
		    print "Output Type: " + type
            if type == "file" then
                filename = output.name
                print "File Name: " + filename
            end if
            vulns.push([type, memAddr, unsec, lib, output])
            index = index + 1
	    end for
	    print "<b>"
        print "Enter '0' to return to memory address options"
        vuln_id = user_input("Choose vulnerability:").to_int - 1
        if vuln_id <= (vulns.len) and vuln_id > -1 then
            check = true
            vuln = vulns[vuln_id]
        else if vuln_id != -1 then
            print "<color=orange>Input Error: Option not found"
        end if  
    end while
    return vuln
end function


get_passwords = function(file, root=false)//deciphers all passwords for all users in given file and returns a list [[user, pass], [user, pass], ...](if root==true will try to only decipher root pass)
    lines = file.get_content.split("\n")
    if root == true then
        if file.get_content.indexOf("root:") != null then
            for line in lines
                if line.indexOf("root:") != null then
                    print "Deciphering root pass ..."
                    userPass = line.split(":")
                    pass = crypto.decipher(userPass[1])
                end if
            end for
            return ["root", pass]
        end if
    end if
    passwords = []
    for line in lines
        userPass = line.split(":")
        userPass[1] = crypto.decipher(userPass[1])
        passwords.push(userPass)
    end for
	return passwords
end function


computer_interface = function(computer)
    main_dir = "/"
    pc_name = computer.get_name
    print "What permissions does the computer have?"
    user = user_input(">").lower
    while true 
        cmd_input = user_input("<computer>" + user + "@" + pc_name + ":" +  main_dir + "# " + "\n" + ">")
        if indexOf(cmd_input, " ") != null then 
            cmd_input = cmd_input.split(" ")
            cmd = cmd_input[0]
        else 
            cmd = cmd_input
        end if
        params = []
        if cmd_input isa list then
            for param in cmd_input[1:]
                params.push(param)
            end for
        end if
        
        //ps
        if cmd == "ps" then
            if params.len != 0 then
                print "ps - shows active programs"
            end if
            print format_columns(computer.show_procs())

        //cd
        else if cmd == "cd" then
            if params[0] == ".." then
                new_dir = parent_path(main_dir)
            else if params[0][0] == "/" then 
                new_dir = params[0]
            else 
                new_dir = main_dir + "/" + params[0]
            end if

            if params.len != 1 then
                print "cd [path]/[..] - Makes given directory or parent directory working directory"
                print "Example:"
                print "    cd /root/Desktop"
                print "    cd .."
                
            else if computer.File(new_dir) and computer.File(new_dir).is_folder then
                main_dir = new_dir
            else if computer.File(new_dir) and (not computer.File(new_dir).is_folder)then
                print "<color=red>Error: path must be folder"
            else 
                print "<color=red>Error: path not found"
            end if
        
        //touch
        else if cmd == "touch" then
            if params.len != 2 then
                print "touch [path] [file_name] - Creates an empty text file at the provided path"
                print "Example: touch /home/User example_file"
            else 
                name = params[1]
                path = params[0]
                result = computer.touch(path, name)
                type = typeof(computer.touch(path, name).to_int)
                if result == 1 and computer.File(path + "/" + name) then
                    print "<color=green>Succesfully created <b>" + path + "/" + name
                else
                    print "<b><color=red>Creation Error: " + result
                end if
            end if
        
        //passwd
        else if cmd == "passwd" then
            if user != "root" then
                check = perm_ask
            end if
            if check then
                if params.len != 2 then print "passwd [username] [password] - Changes password for given user(must be root)"
                computer.change_password(params[0], params[1])
            end if

        //ls
        else if cmd == "ls" then
            show_all = false
            show_perms = false
            path = main_dir
            if params.len <= 3 and params.len > 0 then
                for param in params
                    if param[0] == "-" then
                         if param == "-a" then show_all = true
                         if param == "-p" then show_perms = true
                    else
                        ls_path = param
                    end if
                end for

            else if params.len == 0 then
                ls_path = main_dir
            else
                print "ls opt[-a] opt[-p] opt[path] - lists contents of given path or main dir"
                print " if -a then recursively lists all folders"
                print " if -p shows owner, owner group and permissions of all listed files)"
            end if
            ls(computer, ls_path, 0, show_all, show_perms)

        //groups
        else if cmd == "groups" then
            if params.len != 1 then 
                print "groups [username] -  Returns groups associated with an existing user on the computer"
            else 
                print computer.groups(params[0])
            end if
        
        //groupadd
        else if cmd == "groupadd" then
            if user != "root" then
                print "Insufficient perms for command"
                conf = user_input("continue(Y/n)").lower
                if conf != "n"then conf = true
            else if params.len != 2 then
                print "groupadd [username] [group] - Creates a new group associated with an existing user on the computer"
            else if conf then
                u_name = params[0]
                g_name = params[1]
                if computer.create_group(u_name. g_name) == null then
                    print "<color=orange>Failed to create group: Input error"
                end if
            end if

        //groupdel
        else if cmd == "groupdel" then
            if user != "root" then
                print "Insufficient perms for command"
                conf = user_input("continue(Y/n)").lower
                if conf != "n"then conf = true
            else if params.len != 2 then
                print "groupdel [username] [group] - Deletes an existing group associated with an existing user on the computer"
            else if conf then
                u_name = params[0]
                g_name = params[1]
                if computer.create_group(u_name. g_name) == null then
                    print "<color=orange>Failed to delete group: Input error"
                end if
            end if
        
        //ipinfo    
        else if cmd == "ipinfo" then
            if params.len != 0 then print "ipinfo - shows local ip, public ip, network gateway, active ports and network devices"
            router = get_router(computer.public_ip)
            print "   _______     ____     ___         _ "
            print "  /  _/ _ \   /  _/__  / _/__      (_)"
            print " _/ // ___/  _/ // _ \/ _/ _ \    _   "
            print "/___/_/     /___/_//_/_/ \___/   (_)  "
            print ""
            info = "[Public IP]: " + computer.public_ip + "\n"
            info = info + "[Network Gateway]: " + computer.network_gateway + "\n"
            info = info + "[Local IP]: " + computer.local_ip + "\n"
            print format_columns(info)
            info ="{Active Ports}" + "\n"
            info = info +  "Number Status Service" + "\n"
            ports = computer.get_ports
            for port in ports
                status = "open"
                if port.is_closed then status = "closed"
                info =  info + port.port_number + " " + status + " " + router.port_info(port) + "\n"
            end for
            print format_columns(info)
            info = "{Network Devices}" + "\n"
            info = info + "Name Chipset Monitor" + "\n"
            n_devices = computer.network_devices.split(char(10))
            for n_device in n_devices
                info = info + n_device + "\n"
            end for
            print format_columns(info)

        //iwlist
        else if cmd == "iwlist" then
            if params.len != 1 then 
                print "<b>iwlist [net device]"
            else
                devices = computer.network_devices
                if devices == null or devices.indexOf(params[0]) == null then exit("Input Error: Network device not found")
                if params[0].indexOf("eth") != null then exit("Input Error: ethernet cards not supported for this command")
                networks = computer.wifi_networks(params[0])
                if networks == null then 
                    print "<b>iwlist [net device]"
                else
                    info = "BSSID PWR ESSID"
                    for network in networks
	                    info = info + "\n" + network
                    end for
                    print(format_columns(info))
                end if
            end if

        //wifi
        else if cmd == "wifi" then
            if params.len != 3 then
                print "<b>Usage:</b> wifi [net_device] [bssid] [essid] [password] - connects to given wifi"
            else
                result = computer.connect_wifi(params[0], params[1], params[2], params[3])
                if typeof(result) == "string" then print result  
            end if
            
        //pass
        else if cmd == "pass" then 
            if (not computer.File("/etc/passwd")) or (not computer.File("/etc/passwd").has_permission("r")) then
                print "<b><color=orange>Error: No access to password file"
            else
                passfile = computer.File("/etc/passwd")
                start = indexOf(passfile.get_content, "root:")
                ending = indexOf(passfile.get_content, char(10))
                pass = passfile.get_content[start+5:ending]
                pass = crypto.decipher(pass)
                print "root:" + pass
            end if

        //mkdir
        else if cmd == "mkdir" then
            if params.len != 1 then
                print "<b>Usage:</b> mkdir [/path/to/new_dir/dir_name]/[dir_name] - creates new directory at given path or at current path"
            else if indexOf(params[0], "/") == null then
                dir_name = params[0]
                computer.create_folder(main_dir, dir_name)
            else
                sls = allIndexes(params[0], "/")
                lsl = sls[-1]
                dir_path = params[0][:lsl]
                dir_name = params[0][lsl+1:]
                computer.create_folder(dir_path, dir_name)
            end if
        
        //pwd
        else if cmd == "pwd" then
            print main_dir
        
        //chmod
        else if cmd == "chmod" then
            if params.len > 3 or params.len < 2 then
                print "<b>Usage:</b> chmod [file_path] [perms] [isRecursive=0]"
                print "<b>Example:</b> chmod /example/file g+wr 1"
            else 
                file = computer.File(params[0])
                if file == null then
                    print "<color=red>Error:File not found"
                else if params.len == 3 then
                    result = file.chmod(params[1], params[2])
                else
                    result = file.chmod(params[1], 0)
                end if
                print result
            end if
        

        //useradd
        else if cmd == "useradd" then
            if params.len != 2 then
                print "<b>Usage:</b> useradd [username] [password] - Creates a user on the computer"
            else
            result = computer.create_user()
            if result isa string then print result
            end if

        //userdel
        else if cmd == "userdel" then
            if params.len > 2 or params.len == 0 then
                print "<b>Usage:</b> userdel [username]"
                print "-h flag to delete home directory of user"
                print "<b>Example:</b>"
                print "    userdel Example_user -h"
            else
            removeHome = false
            if params.len == 2 and params[1] == "-h" then removeHome = true
            result = computer.delete_user(params[0], removeHome)
            if result and result isa string and result.len > 0 then print result
            end if
        
        //cp
        else if cmd == "cp" then
            if params.len > 3 or params.len < 2 then
                print "<b>Usage:</b> cp [file_path] [new_path] opt[new_name] - copies given file to given new path"
            else if params.len == 2 then
                o_file = computer.File(params[0])
                result = o_file.copy(params[1], o_file.name)
            else
                o_file = computer.File(params[0])
                result = o_file.copy(params[1], params[2])
            end if
            if result and result isa string and result.len > 0 then print result
        
        //rm
        else if cmd == "rm" then
            if params.len != 1 then
                print "<b>Usage:</b> rm [file_path] - delete the given file"
            else
                file = computer.File(params[0])
                result = file.delete
            end if
            if result and result isa string and result.len > 0 then print result

        //cat
        else if cmd == "cat" then
            if params.len != 1 then
                print "<b>Usage: </b>cat [file_path] - prints contents of  text file"
            else
                if indexOf(params[0], "/") == null then
                    file_path = main_dir + "/" + params[0]
                end if
                file = computer.File(file_path)
                if file then
                    content = file.get_content
                else
                    print "<color=orange>Error: file not found"
                end if
                if content == null then
                    print "<color=orange>Error: can't read file"
                else
                    print content
                end if
            end if 
        
        //pass
        else if cmd == "pass" then
            if computer.File("/etc/passwd").has_permission("r") then
                userPass = get_passwords(computer.File("/etc/passwd"), true)
                print userPass[0] + "@" + userPass[1]
            else
                print "<color=orange>Error:shit!_can't_get_passwd_file_sorry"
            end if

        //mail
        else if cmd == "mail" then
            home = computer.File("/home")
            users = home.get_folders
            for user in users
                passfile = computer.File("/home/"+user.name+"/Config/Mail.txt")
                if passfile then
                    if passfile.has_permission("r") then
                        for userPass in get_passwords(passfile)
                            print userPass[0] + ":" + userPass[1]
                        end for
                    else
                        print "<color=orange>Error:Can't access access Mail file of " + user.name
                    end if
                end if
            end for

         //bank
        else if cmd == "bank" then
            home = computer.File("/home")
            users = home.get_folders
            for user in users
                passfile = computer.File("/home/"+user.name+"/Config/Bank.txt")
                if passfile then
                    if passfile.has_permission("r") then
                        for userPass in get_passwords(passfile)
                            print userPass[0] + ":" + userPass[1]
                        end for
                    else
                        print "<color=orange>Error:Can't access access Bank file of " + user.name
                    end if
                end if
            end for

        //unlock
        else if cmd == "unlock" then
            computer.File("/").chmod("o+wrx", 1)
            computer.File("/").chmod("u+wrx", 1)
            computer.File("/").chmod("g+wrx", 1)

        //fail
        else 
			print"<color=red>Error:Command not found"
        end if
    end while
end function


hack_computer = function(computer)//gives user ability to use some hacking tools against given computer
    //Font: Ogre
print("<color=green>     ________  __________ __ _____   ________            ")
print("<color=green>    / ____/ / / / ____/ / _/   _/ | / / ____/            ")
print("<color=green>   / /_  / / / / /   / ,<   / /   |/ / / __              ")
print("<color=green>  / __/ / /_/ / /___/ /| |_/ /  /|  / /_/ /              ")
print("<color=green> /_/__  \____/\____/_/_|_/___/_/_|_/\____/               ")
print("<color=green>   / / / / __ \ \ \/ / __ \/ / / / __ \                  ")
print("<color=green>  / / / / /_/ /  \  / / / / / / / /_/ /                  ")
print("<color=green> / /_/ / ____/   / / /_/ / /_/ / _, _/                   ")
print("<color=green> \____/_/_____  /_/\____/\____/_/_|_| __________________ ")
print("<color=green>   / ____/ __ \/  |/  / __ \/ / / / / _/_  __/ ____/ __ \")
print("<color=green>  / /   / / / / /|_/ / /_/ / / / / ,<   / / / __/ / /_/ /")
print("<color=green> / /___/ /_/ / /  / / ____/ /_/ / /| | / / / /___/ _, _/ ")
print("<color=green> \____/\____/_/  /_/_/    \____/_/ |_|/_/ /_____/_/ |_|  ")  
    computer_interface(computer)
end function


ask_lib = function()//asks user to choose a lib from /lib directory
    shell = get_shell
    computer = shell.host_computer
    libs = computer.File("/lib").get_files
    index = 1
    inputcheck = false
    while inputcheck == false
        for lib in libs
            print "[" + index + "]-" + lib.name[:-3]
            index = index + 1
        end for 
        lib_id = user_input("Choose lib:").to_int - 1
        lib  = metax.load(libs[lib_id].path)
        return lib
    end while
end function


help = function()//shows user guide for Hax0r tool
	// Font: Ogre
    
	inputOK = false
	while inputOK == false
		print "1) Direct Hack"
		print "2) Port Scan"
		print "4) Command"
		exit("<color=red>Developers_shit_their_pants_Error:sorry_we_didn't_give_a_shit_about_this_yet</color>")
	end while

end function


//PROGRAM--------------------------------------------------------- 
title
start = startup
preoption =  start[1]
option = start[0]

//Direct Hack
if option == 1 then
	exit("<color=red>Developers_shit_their_pants_sorry: we_didn't_gave_a_shit_about_this_yet</color>")
end if


//Port Scan
if option == 2 then
	//Font:Ogre
print("<color=green>     __  ___________________ _____   ________ ")
print("<color=green>    /  |/  / ____/ ___/ ___ /  _/ | / / ____/ ")
print("<color=green>   / /|_/ / __/  \__ \\__ \ /  /  |/ / / __   ")
print("<color=green>  / /  / / /___ ___/ /__/  /  / /|  / /_/ /   ")
print("<color=green> /_/  /_/_____ /____/____/___/_/_|_/\____/___ ")
print("<color=green> | |     / /  _/_  __/ / / /  / /   /  _/ __ )")
print("<color=green> | | /| /  / /  / / / /_/ /  / /    / /  __  |")
print("<color=green> | |/ |/  / /  / / / __  /  / /____/ /  /_/ / ")
print("<color=green> |__/|__/___/ /_/ /_/ /_/  /_____/___/_____/  ")
	if preoption == 1 then
        lib = ask_lib
    end if
    if preoption == 2 then
	    ipAddr = ask_ip		
	    port = ask_port(ipAddr)
	    lib = get_lib(ipAddr, port)
        if not lib then exit("Error: couldn't find lib")
    end if
	vuln_data = choose_vuln(lib)
    memAddr = vuln_data[1]
    unsec = vuln_data[2]
    type = vuln_data[0]
    output = vuln_data[-1]
    if type == "FAIL" or type == "number" then
        conf = user_input("Is extra data required for explot(y/N):")
        if conf == "y" or conf == "Y" then
            extra = user_input("Input extra value:")
            output = lib.overflow(memAddr, unsec, extra)
            type = typeof(output)
            if type == null or type == 0 then
                type = "FAIL"
            end if 
        end if
    end if 
    
    if type == "FAIL" then
        exit("<color=red>Fatal Error: Vulnerability unusable")
    end if

    if type == "computer" then
        hack_computer(output)
    end if 
    if type == "shell" then
        print "<color=blue> More_shell_tools_WIP_rn_so_DIY"
        conf = user_input("Open terminal(Y/n):")
        if conf != "n" and conf != "N" then
            output.start_terminal
        end if
    end if

    if type == "file" then
        print "<color=blue> File_hack_is_WIP_so_look_at_this_guy :() )"
        print "<b>Files:"
        for file in output.get_files
            print file.name
            if (not file.is_binary) then
                print(file.get_content)
            end if 
        end for 
        print "<b>Folders:"
        for folder in output.get_folders
            print folder.name
        end for
    end if 
end if 



//Help
if option == 3 then
	help
end if
                                                                                             


