
//command hxr
//IMPORTS
crypto = include_lib("/lib/crypto.so")
if not crypto then
    crypto = include_lib(current_path + "/crypto.so")
end if
if not crypto then exit("<color=red>Fatal Error: Can't find crypto.so library in the /lib path or the current folder")

metax = include_lib("/lib/metaxploit.so")
if not metax then
    metax = include_lib(current_path + "/metaxploit.so")
end if
if not metax then exit("<color=red>Fatal Error: Can't find metaxploit.so library in the /lib path or the current folder")
//FUNCTIONS------------------------------------------------------
//title - clears screen and shows PORTHACK title
//ip_ports - returns a list of used ports on given ip address
//nmap(ipAddr) -  returns indexed info about used ports on given ip address
//get_lib(ipAddr, port) - returns library used on given port of given ip address as metalib
//ask_port(ipAddr) - asks user to choose port on given ip address and returns chosen port as port
//get_devinf(ipAddr, port) - returns info list[num_conn_gateway, num_portforward, num_users, (r - root user is active/y - non-root user is active/n - no users active)] for device on given port
//allIndexes(text, value) - returns a list of indexes of all instances of value in text
//ask_ip - asks user for ip address returns given ip address
//get_unsecs(lib) - returns unsecure values from given memory address of given lib
//ask_memAddr(lib) - asks user to choose a memory address from given lib
//choose_vuln(lib) - shows user available vulnerabilities in given lib and returns a list of data ([vuln_type, memAddr, unsec_value, lib, output]) about chosen vulnerability 
//get_passwords(file, root=false) - deciphers all passwords for all users in given file and returns a list [[user, pass], [user, pass], ...](if root==true will try to only decipher root pass)
//hack_computer(computer) - gives user ability to use some hacking tools against given computer 
//ask_lib - asks user to choose a lib from /lib directory
//help - shows user guide for Hax0r tool


title = function()//clears screen and shows Hax0r title
	clear_screen
	//https://manytools.org/hacker-tools/ascii-banner/
	                                                                                                    
                                                                                                    
print"<color=green>---------------------------------------------"
print"<color=green>Face_the_unstopable"
print"<color=green>---------------------------------------------" 
print"<color=green>    |\   __  \|\   ____\|\   ____\     "
print"<color=green>    \ \  \|\ /\ \  \___|\ \  \___|_    "
print"<color=green>     \ \   __  \ \  \    \ \_____  \   "
print"<color=green>      \ \  \|\  \ \  \____\|____|\  \  "
print"<color=green>       \ \_______\ \_______\____\_\  \ "
print"<color=green>        \|_______|\|_______|\ ________\"
print"<color=green>                           \|_________|"
print"<color=green>---------------------------------------------"
print"<color=green>Balls_cutting_system@"
print"<color=green>Mostly_by_wer2403(with_damirka's_help)_;()"
print"<color=green>---------------------------------------------"                           
end function


ip_ports = function(ipAddr)//returns a list of used ports on given ip address
	if is_lan_ip(ipAddr) then 
        router = get_router
        ports = router.device_ports(ipAddr)
        lan = true
    else
        router = get_router(ipAddr)
        ports = used_ports(router)
    end if
	return [0] + ports
end function

nmap = function(ipAddr) // returns indexed info about used ports on given ip address
    if is_lan_ip(ipAddr) then 
        router = get_router
        ports = router.device_ports(ipAddr)
        lan = true
    else
        router = get_router(ipAddr)
        ports = used_ports(router)
    end if
    
    info = "INDEX PORT STATE SERVICE VERSION LAN"  
    info = info + "\n" + "0: router open kernel_router " + kernel_version(router) + " " + local_ip(router)
    if len(ports) != 0 then 
        index = 0
        for port in ports
            index = index+1
            service_info = router.port_info(port)
            lan_ips = port.get_lan_ip
            port_status = "open"
    
            if port.is_closed then
                port_status = "closed"
            end if
        info = info + "\n" + index + ": " + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
        end for
        return (format_columns(info) + "\n")
    else
        return (format_columns(info) + "\n")
    end if
    
end function


get_lib = function(ipAddr, port)//returns library used on given port of given ip address as metalib
	if typeof(port) != "number" then
		session = metax.net_use(ipAddr, port.port_number)
	else
		session = metax.net_use(ipAddr, port)
	end if 
	lib = dump_lib(session)	
	return lib
end function


ask_port = function(ipAddr)//asks user to choose port on given ip address and returns chosen port as port
	ports = ip_ports(ipAddr)
	inputOK = false
	while (not inputOK)
		print nmap(ipAddr)
		index = user_input("Choose port:").to_int
		if index > ports.len or index < 0 then
			print "<color=orange>Input Error: Index not found<color>"
		else
			port = ports[index]
			if port != 0 then
				if port.is_closed then 
					print "<color=orange>Input Error: Port closed</color>" 
				else 
					inputOK = true 
				end if
            else    
                inputOK = true
			end if
		end if
	end while
	return port
end function


get_devinf = function(ipAddr, port)//returns info list[num_conn_gateway, num_portforward, num_users, (r - root user is active/y - non-root user is active/n - no users active)] for device on given port
    session = metax.net_use(ipAddr, port.port_number)
    num_conn_gateway = session.get_num_conn_gateway
    num_portforward = session.get_num_portforward
    num_users = session.get_num_users
    users = "n"
    if session.is_root_active_user then
        users = "r"
    else if session.is_any_active_user then
        users = "y"
    end if
    info = [num_conn_gateway, num_portforward, num_users, users]
    return info
end function


allIndexes = function(text, value)//returns a list of indexes of all instances of value in text
    idxs = []
    lidx = 1
    summ = 0
    while indexOf(text[lidx:], value) != null
	    idx = indexOf(text[lidx:], value)
	    summ = idx + summ + 1
	    idxs = idxs + [summ]
	    lidx = lidx + idx + 1
end while
    return idxs
end function


startup = function()//shows startup menu and returns chosen option
	// Font: Ogre                                                           
 print"<color=green>   _____ __  ____________   __  _________________"
 print"<color=green>   / ___// / / /  _/_  __/  / / / /  _/_  __/ ___/"
 print"<color=green>   \__ \/ /_/ // /  / /    / /_/ // /  / /  \__ \ "
 print"<color=green>  ___/ / __  // /  / /    / __  // /  / /  ___/ / "
 print"<color=green> /____/_/ /_/___/ /_/    /_/ /_/___/_/_/  /____/  "
 print"<color=green>    /   |        / ____/   |  / | / /             "
 print"<color=green>   / /| |       / /_  / /| | /  |/ /              "
 print"<color=green>  / ___ |      / __/ / ___ |/ /|  /               "
 print"<color=green> /_/  |_|     /_/   /_/  |_/_/ |_/                "
	
    type_check = true
    while type_check == true
		print "1) Local Hack"
        print "2) Port Hack"

		type = user_input("Choose option:").to_int
        if type == 1 or type == 2 then
            startup = true
            while startup == true
                print "1) Direct Hack"
		        print "2) Scan Hack"
		        print "3) Help" 
                option = user_input("Choose option:").to_int
                if option == 1 or option == 2 or option == 3 or option == 4 then
                    startup = false
                else
                    print "<color=orange>Input Error: Option not found"
                end if 
            end while
            type_check = false
        else
            print "<color=orange>Input Error: Option not found"
        end if 

    end while
	return [option, type]
end function


ask_ip = function()//asks user for ip address returns given ip address
	check = false
	while check == false
		ipAddr = user_input("<b>Input IP address:</b>")
		if is_valid_ip(ipAddr) == 1 then	
			check = true
		else 
			print("<color=orange>Input Error: IP address is not valid</color>")
		end if 
	end while
    return ipAddr
end function


get_unsecs = function(lib, memAddr)//returns unsecure values from given memory address of given lib
	raw = metax.scan_address(lib, memAddr)
	vuln_ids = allIndexes(raw, "Unsafe check:")
	unsecs = []
	for vuln_id in vuln_ids
		vuln = raw[vuln_id:]
		unsec_start_id = indexOf(vuln, "<b>")+3
		unsec_end_id = indexOf(vuln, "</b>")
		unsec = vuln[unsec_start_id:unsec_end_id]
		unsecs.push(unsec)
	end for
	return unsecs
end function


ask_memAddr = function(lib, mems = null)//asks user to choose a memory address from given lib
    memcheck = false
	if mems == null then
        print("Scanning " + lib_name(lib) + " " + version(lib) + " ...")
		memcheck = true
        mems = metax.scan(lib)
    end if
	check = false
    while check == false
        index = 1
        for memAddr in mems
            print index + ") " + "[" + memAddr + "]"
            index = index + 1
        end for
        answer = user_input("Choose memory address:").to_int
        if typeof(answer) == "number" and answer <= (mems.len + 1) then
            check = true
            memAddr = mems[answer - 1]
        else 
            print "<color=orange>Input Error: Option not found"
        end if
    end while
	if memcheck == true then
		return [memAddr, mems]
	else
    	return memAddr
	end if 
end function



choose_vuln = function(lib)//shows user available vulnerabilities in given lib and returns a list of data ([vuln_type, memAddr, unsec_value, lib, output]) about chosen vulnerability 
    check = false
	mems = null
	memcheck = true
    while check == false 
        memAddr = ask_memAddr(lib, mems)
		if memcheck == true then 
			mems = memAddr[-1]
			memAddr = memAddr[0]
			memcheck = false
		end if 
	    results = []
	    unsecs = get_unsecs(lib, memAddr)
	    print "[" + memAddr + "]" + "<b>-----------------------------</b>"
        index = 1
        vulns = []
	    for unsec in unsecs
            print "	"
            print "[" + index + "]" + "-------------------"
	    	output = lib.overflow(memAddr, unsec)
            type = typeof(output)
		    if typeof(output) == "null" then
			    type = "FAIL"
	        end if
		    print "	"
	       	print "Unsecure value: " + unsec
		    print "Output Type: " + type
            if type == "file" then
                filename = output.name
                print "File Name: " + filename
            end if
            vulns.push([type, memAddr, unsec, lib, output])
            index = index + 1
	    end for
	    print "<b>"
        print "Enter '0' to return to memory address options"
        vuln_id = user_input("Choose vulnerability:").to_int - 1
        if vuln_id <= (vulns.len) and vuln_id > -1 then
            check = true
            vuln = vulns[vuln_id]
        else if vuln_id != -1 then
            print "<color=orange>Input Error: Option not found"
        end if  
    end while
    return vuln
end function


get_passwords = function(file, root=false)//deciphers all passwords for all users in given file and returns a list [[user, pass], [user, pass], ...](if root==true will try to only decipher root pass)
    lines = file.get_content.split("\n")
    if root == true then
        if file.get_content.indexOf("root:") != null then
            for line in lines
                if line.indexOf("root:") != null then
                    print "Deciphering root pass ..."
                    userPass = line.split(":")
                    pass = crypto.decipher(userPass[1])
                end if
            end for
            return ["root", pass]
        end if
    end if
    passwords = []
    for line in lines
        userPass = line.split(":")
        userPass[1] = crypto.decipher(userPass[1])
        passwords.push(userPass)
    end for
	return passwords
end function



hack_computer = function(computer)//gives user ability to use some hacking tools against given computer
    //Font: Ogre
print("<color=green>    ________  __________ __ _____   ________            ")
print("<color=green>    / ____/ / / / ____/ //_//  _/ | / / ____/            ")
print("<color=green>   / /_  / / / / /   / ,<   / //  |/ / / __              ")
print("<color=green>  / __/ / /_/ / /___/ /| |_/ // /|  / /_/ /              ")
print("<color=green> /_/__  \____/\____/_/_|_/___/_/_|_/\____/               ")
print("<color=green>   / / / / __ \ \ \/ / __ \/ / / / __ \                  ")
print("<color=green>  / / / / /_/ /  \  / / / / / / / /_/ /                  ")
print("<color=green> / /_/ / ____/   / / /_/ / /_/ / _, _/                   ")
print("<color=green> \____/_/_____  /_/\____/\____/_/_|_| __________________ ")
print("<color=green>   / ____/ __ \/  |/  / __ \/ / / / //_/_  __/ ____/ __ \")
print("<color=green>  / /   / / / / /|_/ / /_/ / / / / ,<   / / / __/ / /_/ /")
print("<color=green> / /___/ /_/ / /  / / ____/ /_/ / /| | / / / /___/ _, _/ ")
print("<color=green> \____/\____/_/  /_/_/    \____/_/ |_|/_/ /_____/_/ |_|   ")  
    exitcheck = false
    while exitcheck == false
        inputOK = false
        while inputOK == false
            print "0)Exit"
            print "1)get root pass"
            print "2)Get user mail data"
            print "3)Get user bank data"
            print "4)List directory"
            print "5)Delete file"
            print "6)Read file"
            print "7)Create file"
            option = user_input("Choose option:").to_int
            if [0, 1, 2, 3, 4, 5, 6, 7].indexOf(option) != null then
                inputOK = true
            else
                print "<color=orange>Input Error: I_can't_find_this_option"
            end if
        end while

        if option == 0 then
            exitcheck = true
        end if

        if option == 1 then
            if computer.File("/etc/passwd").has_permission("r") then
                userPass = get_passwords(computer.File("/etc/passwd"), true)
                print userPass[0] + "@" + userPass[1]
            else
                print "<color=orange>Error:shit!_can't_get_passwd_file_sorry"
            end if
        end if

        if option == 2 then
            home = computer.File("/home")
            users = home.get_folders
            for user in users
                passfile = computer.File("/home/"+user.name+"/Config/Mail.txt")
                if passfile then
                    if passfile.has_permission("r") then
                        for userPass in get_passwords(passfile)
                            print userPass[0] + ":" + userPass[1]
                        end for
                    else
                        print "<color=orange>Error:Can't access access Mail file of " + user.name
                    end if
                end if
            end for
        end if

        if option == 3 then 
            home = computer.File("/home")
            users = home.get_folders
            for user in users
                passfile = computer.File("/home/"+user.name+"/Config/Bank.txt")
				if passfile then
                	if passfile.has_permission("r") then
                	    for userPass in get_passwords(passfile)
                	        print userPass[0] + ":" + userPass[1]
                	    end for
                	else
                	    print "<color=orange>Error:shit!_can't_get " + user.name + "'s_paypal_info"
                	end if
				end if
            end for
        end if

        if option == 4 then
            inputcheck = false
            while inputcheck == false
                path = user_input("Enter directory to list:")
                dir = computer.File(path)
                if dir then
                    print "<b>Folders:"
                    for folder in dir.get_folders
                        print folder.name
                    end for
                    print "<b>Files:"
                    for file in dir.get_files
                        print file.name
                    end for
					inputcheck = true
                    user_input("", false, true)
                else
                    print("<color=orange>Input Error: No_directory_like_that_or_idk")
                end if
            end while
        end if

        if option == 5 then
            inputcheck = false
            while inputcheck == false
                del_path = user_input("Input file path:")
                file = computer.File(del_path)
                file.delete
                if not file then
                    print("File got deleted successfully.")
                    inputcheck = true
                end if
            end while
        end if

        if option == 6 then
            file_path = user_input("Input file path:")
            file = computer.File(file_path)
            if file then
                if file.has_permission("r") then
                    print(file.get_content)
                else
                    print "<color=orange>Error:Don't_have_premission_for_this_shit"
                end if
            else
                print "<color=orange>Error:No_file_or_smth"
            end if
        end if

        if option == 7 then
            file_path = user_input("Where to create file:")
            file_name = user_input("File name:")
            file_content = user_input("File content:")
            computer.touch(file_path, file_name)
            file = computer.File(file_path + "/" + file_name)
            file = file.set_content(file_content)
        end if
    end while
end function


ask_lib = function()//asks user to choose a lib from /lib directory
    shell = get_shell
    computer = shell.host_computer
    libs = computer.File("/lib").get_files
    index = 1
    inputcheck = false
    while inputcheck == false
        for lib in libs
            print "[" + index + "]-" + lib.name[:-3]
            index = index + 1
        end for 
        lib_id = user_input("Choose lib:").to_int - 1
        lib  = metax.load(libs[lib_id].path)
        return lib
    end while
end function


help = function()//shows user guide for Hax0r tool
	// Font: Ogre
    
	inputOK = false
	while inputOK == false
		print "1) Direct Hack"
		print "2) Port Scan"
		print "4) Command"
		exit("<color=red>Developers_shit_their_pants_Error:sorry_we_didn't_gave_a_shit_about_this_yet</color>")
	end while

end function


//PROGRAM--------------------------------------------------------- 
title
start = startup
preoption =  start[1]
option = start[0]

//Direct Hack
if option == 1 then
	exit("<color=red>Developers_shit_their_pants_sorry: we_didn't_gave_a_shit_about_this_yet</color>")
end if


//Port Scan
if option == 2 then
	//Font:Ogre
print("<color=green>    __  ___________________ _____   ________ ")
print("<color=green>    /  |/  / ____/ ___/ ___//  _/ | / / ____/ ")
print("<color=green>   / /|_/ / __/  \__ \\__ \ /  /  |/ / / __   ")
print("<color=green>  / /  / / /___ ___/ /__/ //  / /|  / /_/ /   ")
print("<color=green> /_/  /_/_____//____/____/___/_/_|_/\____/___ ")
print("<color=green> | |     / /  _/_  __/ / / /  / /   /  _/ __ )")
print("<color=green> | | /| / // /  / / / /_/ /  / /    / // __  |")
print("<color=green> | |/ |/ // /  / / / __  /  / /____/ // /_/ / ")
print("<color=green> |__/|__/___/ /_/ /_/ /_/  /_____/___/_____/  ")
	if preoption == 1 then
        lib = ask_lib
    end if
    if preoption == 2 then
	    ipAddr = ask_ip		
	    port = ask_port(ipAddr)
	    lib = get_lib(ipAddr, port)
    end if
	vuln_data = choose_vuln(lib)
    memAddr = vuln_data[1]
    unsec = vuln_data[2]
    type = vuln_data[0]
    output = vuln_data[-1]
    if type == "FAIL" or type == "number" then
        conf = user_input("Is extra data required for explot(y/N):")
        if conf == "y" or conf == "Y" then
            extra = user_input("Input extra value:")
            output = lib.overflow(memAddr, unsec, extra)
            type = typeof(output)
            if type == null or type == 0 then
                type = "FAIL"
            end if 
        end if
    end if 
    
    if type == "FAIL" then
        exit("<color=red>Fatal Error: Vulnerability unusable")
    end if

    if type == "computer" then
        hack_computer(output)
    end if 
    if type == "shell" then
        print "<color=blue> More_shell_tools_WIP_rn_so_DIY"
        conf = user_input("Open terminal(Y/n):")
        if conf != "n" and conf != "N" then
            output.start_terminal
        end if
    end if

    if type == "file" then
        print "<color=blue> File_hack_is_WIP_so_look_at_this_guy :() )"
        print "<b>Files:"
        for file in output.get_files
            print file.name
            if (not file.is_binary) then
                print(file.get_content)
            end if 
        end for 
        print "<b>Folders:"
        for folder in output.get_folders
            print folder.name
        end for
    end if 
end if 



//Help
if option == 3 then
	help
end if
                                                                                             


