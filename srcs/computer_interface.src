//Computer Interface
crypto = include_lib("/lib/crypto.so")
if not crypto then
    crypto = include_lib(current_path + "/crypto.so")
end if
if not crypto then exit("<color=red>Fatal Error: Can't find crypto.so library in the /lib path or the current folder")

metax = include_lib("/lib/metaxploit.so")
if not metax then
    metax = include_lib(current_path + "/metaxploit.so")
end if
if not metax then exit("<color=red>Fatal Error: Can't find metaxploit.so library in the /lib path or the current folder")

//Commands:
//[p] - depends on computer permissions
//[a] - any
//[u] - not guest
//[r] - only root
//[a]help - shows all commands and their usage
//✔[p]cd [directory/..] - Makes given directory or parent directory main 
//✔[p]touch [path] [file_name] - Creates an empty text file at the provided path
//✔[r]passwd [username] [password] - Changes password for given user(must be root)
//✔[a]ls opt[-a] opt[-p] opt[path] - lists contents of given path or main dir (if -a then list all folders recusively)(if -p shows owner, owner group and permissions of all listed files)
//[a]groups [username] -  Returns a string containing groups associated with an existing user on the computer
//[r]groupadd [username] [group] - Creates a new group associated with an existing user on the computer
//[r]groupdel [username] [group] - Deletes an existing group associated with an existing user on the computer
//[r]useradd [username] [password] - Creates a user on the computer
//[r]userdel [username] [removeHome=false]  - Deletes the indicated user from the computer. It can optionally delete the user's home folder
//✔[a]ps - shows active programs 
//[p]kill [PID] - Closes a program associated with the provided PID
//[a]ipinfo - shows local ip, public ip, network gateway, active ports and network devices
//[a]iwlist [net_device] - shows info about available wifi networks
//[u]wifi  [bssid] [essid] [password] - connects to given wifi
//[p]mkdir [path] [name=newFolder] - Creates a folder at the provided path
//[u]chmod [file_path] [perms] [isRecursive=false] - Modifies permissions of given file
//[p]cp [file_path] [new_path] opt[new_name] -  Copies the file to the provided path
//[p]rm [file_path] - delete the given file
//[p]cat [file_path] - prints contents of  text file
//[a]whatis [file_path] - shows all available info an given file
//[p]edit [-a/-r] [file_path] - shows text file contents and asks for text input (if -a adds given text to the file if -r replaces file content with given text)
//[p]rename [file_path] [new_name] - Renames the file with the name provided
//[p]bank - Tries to get bank info of all users
//[p]pass - Tries to get root pass of computer
//[p]mail - Tries to get mail info of all users
//[a]nuke - delete all files allowed by permissions(asks if you are sure)
//[a]pns - it says penis (VERY FUNNY)


perm_ask = function(user)//If permissions are not root asks confirmation to continue
    conf = user_input("This command only works with root permissions, continue(Y/n):")
    if conf.lower == "y" then
        return true
    else 
        return false
    end if
end function


ls = function(computer, ls_path, index=0, recursive=false, perms=false)//lists files in given path can be recursively and can show permissions of files
    output = ""
    ls_file = computer.File(ls_path)
    files = ls_file.get_files
    folders = ls_file.get_folders
    if recursive == true then
        for file in files
            info = ("- " * index) + file.name + " FILE"
            if perms == true then info = info + " " + file.permissions
            output = output + info + "\n"
        end for
        for folder in folders
            output = output + ("- " * index) + folder.name + " DIR:" + "\n"
            print format_columns(output)
            output = ""
            ls(computer, folder.path, index+1, recursive, perms)
        end for

    else 
        for file in files
            info = file.name + " FILE"
            if perms == true then info = info + " " + file.permissions
            output = output + info + "\n"
        end for

        for folder in folders
            info = folder.name + " DIR:"
            if perms == true then info = info + " " + folder.permissions
            output = output + info + "\n"
        end for
    end if
    print format_columns(output)
    
end function


computer_interface = function(computer)
    main_dir = "/"
    pc_name = computer.get_name
    print "What permissions does the computer have?"
    user = user_input(">").lower
    while true 
        cmd_input = user_input("<computer>" + user + "@" + pc_name + ":" +  main_dir + "# ").split(" ")
        cmd = cmd_input[0]
        if cmd_input.len >= 1 then
            params = cmd_input[1:]
        else
            params = []
        end if
        
        //ps
        if cmd == "ps" then
            if params.len != 0 then
                print "ps - shows active programs"
            end if
            print format_columns(computer.show_procs())

        //cd
        else if cmd == "cd" then
            if params[0] != ".." then
                new_dir = params[0]
            else
                new_dir = parent_path(main_dir)
            end if
            if params.len != 1 then
                print "cd [directory/..] - Makes given directory or parent directory main"
                print "Example:"
                print "    cd /home"
                print "    cd .."
                
            else if computer.File(new_dir) and computer.File(new_dir).is_folder then
                main_dir = new_dir
            else if computer.File(new_dir) and (not computer.File(new_dir).is_folder)then
                print "<color=red>Error: path must be folder"
            else 
                print "<color=red>Error: path not found"
            end if
        
        //touch
        else if cmd == "touch" then
            if params.len != 2 then
                print "touch [path] [file_name] - Creates an empty text file at the provided path"
                print "Example: touch /home/User example_file"
            else 
                name = params[1]
                path = params[0]
                result = computer.touch(path, name)
                type = typeof(computer.touch(path, name).to_int)
                if result == 1 and computer.File(path + "/" + name) then
                    print "<color=green>Succesfully created <b>" + path + "/" + name
                else
                    print "<b><color=red>Creation Error: " + result
                end if
            end if
        
        //passwd
        else if cmd == "passwd" then
            if user != "root" then
                check = perm_ask
            end if
            if check then
                if params.len != 2 then print "passwd [username] [password] - Changes password for given user(must be root)"
                computer.change_password(params[0], params[1])
            end if

        //ls
        else if cmd == "ls" then
            show_all = false
            show_perms = false
            path = main_dir
            if params.len <= 3 and params.len > 0 then
                for param in params
                    if param[0] == "-" then
                         if param == "-a" then show_all = true
                         if param == "-p" then show_perms = true
                    else
                        ls_path = param
                    end if
                end for

            else if params.len == 0 then
                ls_path = main_dir
            else
                print "ls opt[-a] opt[-p] opt[path] - lists contents of given path or main dir"
                print " if -a then recursively lists all folders"
                print " if -p shows owner, owner group and permissions of all listed files)"
            end if
            ls(computer, ls_path, 0, show_all, show_perms)




        end if
        
    end while
end function

computer_interface(get_shell.host_computer)
//  ______   ______     __   __     __     ______   
// /\  == \ /\  ___\   /\ "-.\ \   /\ \   /\  ___\  
// \ \  _-/ \ \  __\   \ \ \-.  \  \ \ \  \ \___  \ 
//  \ \_\    \ \_____\  \ \_\\"\_\  \ \_\  \/\_____\
//   \/_/     \/_____/   \/_/ \/_/   \/_/   \/_____/