//Computer Interface
crypto = include_lib("/lib/crypto.so")
if not crypto then
    crypto = include_lib(current_path + "/crypto.so")
end if
if not crypto then exit("<color=red>Fatal Error: Can't find crypto.so library in the /lib path or the current folder")

metax = include_lib("/lib/metaxploit.so")
if not metax then
    metax = include_lib(current_path + "/metaxploit.so")
end if
if not metax then exit("<color=red>Fatal Error: Can't find metaxploit.so library in the /lib path or the current folder")

//Commands:
//[p] - depends on computer permissions
//[a] - any
//[u] - not guest
//[r] - only root
//[a]help - shows all commands and their usage
//✔[p]cd [directory/..] - Makes given directory or parent directory main 
//✔[p]touch [path] [file_name] - Creates an empty text file at the provided path
//✔[r]passwd [username] [password] - Changes password for given user(must be root)
//✔[a]ls opt[-a] opt[-p] opt[path] - lists contents of given path or main dir (if -a then list all folders recusively)(if -p shows owner, owner group and permissions of all listed files)
//✔[a]groups [username] -  Returns a string containing groups associated with an existing user on the computer
//✔[r]groupadd [username] [group] - Creates a new group associated with an existing user on the computer
//✔[r]groupdel [username] [group] - Deletes an existing group associated with an existing user on the computer
//✔[r]useradd [username] [password] - Creates a user on the computer
//✔[r]userdel [username] -h  - Deletes the indicated user from the computer. It can optionally delete the user's home folder
//✔[a]ps - shows active programs 
//✔[p]kill [PID] - Closes a program associated with the provided PID
//✔[a]ipinfo - shows local ip, public ip, network gateway, active ports and network devices.
//✔[a]iwlist [net_device] - shows info about available wifi networks
//✔[u]wifi  [bssid] [essid] [password] - connects to given wifi
//✔[p]mkdir [path] [name] - Creates a folder at the provided path
//✔[u]chmod [file_path] [perms] [isRecursive=false] - Modifies permissions of given file
//✔[p]cp [file_path] [new_path] opt[new_name] -  Copies the file to the provided path
//✔[p]rm [file_path] - delete the given file
//✔[p]cat [file_path] - prints contents of  text file
//[a]whatis [file_path] - shows all available info an given file
//[p]edit [-a/-r] [file_path] - shows text file contents and asks for text input (if -a adds given text to the file if -r replaces file content with given text)
//[p]rename [file_path] [new_name] - Renames the file with the name provided
//✔[a]pwd - prints working directory
//[p]bank - Tries to get bank info of all users
//[p]pass - Tries to get root pass of computer
//[p]mail - Tries to get mail info of all users
//[a]nuke - delete all files allowed by permissions(asks if you are sure)
//[r]unlock - gives all users on computer root access
//[a]pns - it says penis (VERY FUNNY)


ls = function(computer, ls_path, index=0, recursive=false, perms=false)//lists files in given path can be recursively and can show permissions of files
    output = ""
    ls_file = computer.File(ls_path)
    files = ls_file.get_files
    folders = ls_file.get_folders
    if recursive == true then
        for file in files
            info = ("-" * index) + file.name + " FILE"
            if perms == true then info = info + " " + file.permissions
            output = output + info + "\n"
        end for
        for folder in folders
            output = output + ("+" * index) + folder.name + " DIR:" + "\n"
            print format_columns(output)
            output = ""
            ls(computer, folder.path, index+1, recursive, perms)
        end for

    else 
        for file in files
            info = file.name + " FILE"
            if perms == true then info = info + " " + file.permissions
            output = output + info + "\n"
        end for

        for folder in folders
            info = folder.name + " DIR"
            if perms == true then info = info + " " + folder.permissions
            output = output + info + "\n"
        end for
    end if
    print format_columns(output)   
end function


allIndexes = function(text, value)//returns a list of indexes of all instances of value in text
    idxs = []
    lidx = 1
    summ = 0
    while indexOf(text[lidx:], value) != null
	    idx = indexOf(text[lidx:], value)
	    summ = idx + summ + 1
	    idxs = idxs + [summ]
	    lidx = lidx + idx + 1
end while
    return idxs
end function


computer_interface = function(computer)
    main_dir = "/"
    pc_name = computer.get_name
    print "What permissions does the computer have?"
    user = user_input(">").lower
    while true 
        cmd_input = user_input("<computer>" + user + "@" + pc_name + ":" +  main_dir + "# ")
        if indexOf(cmd_input, " ") != null then 
            cmd_input = cmd_input.split(" ")
            cmd = cmd_input[0]
        else 
            cmd = cmd_input
        end if
        params = []
        if cmd_input isa list then
            for param in cmd_input[1:]
                params.push(param)
            end for
        end if
        
        //ps
        if cmd == "ps" then
            if params.len != 0 then
                print "ps - shows active programs"
            end if
            print format_columns(computer.show_procs())

        //cd
        else if cmd == "cd" then
            if params[0] == ".." then
                new_dir = parent_path(main_dir)
            else if params[0][0] == "/" then 
                new_dir = params[0]
            else 
                new_dir = main_dir + "/" + params[0]
            end if

            if params.len != 1 then
                print "cd [path]/[..] - Makes given directory or parent directory working directory"
                print "Example:"
                print "    cd /root/Desktop"
                print "    cd .."
                
            else if computer.File(new_dir) and computer.File(new_dir).is_folder then
                main_dir = new_dir
            else if computer.File(new_dir) and (not computer.File(new_dir).is_folder)then
                print "<color=red>Error: path must be folder"
            else 
                print "<color=red>Error: path not found"
            end if
        
        //touch
        else if cmd == "touch" then
            if params.len != 2 then
                print "touch [path] [file_name] - Creates an empty text file at the provided path"
                print "Example: touch /home/User example_file"
            else 
                name = params[1]
                path = params[0]
                result = computer.touch(path, name)
                type = typeof(computer.touch(path, name).to_int)
                if result == 1 and computer.File(path + "/" + name) then
                    print "<color=green>Succesfully created <b>" + path + "/" + name
                else
                    print "<b><color=red>Creation Error: " + result
                end if
            end if
        
        //passwd
        else if cmd == "passwd" then
            if user != "root" then
                check = perm_ask
            end if
            if check then
                if params.len != 2 then print "passwd [username] [password] - Changes password for given user(must be root)"
                computer.change_password(params[0], params[1])
            end if

        //ls
        else if cmd == "ls" then
            show_all = false
            show_perms = false
            path = main_dir
            if params.len <= 3 and params.len > 0 then
                for param in params
                    if param[0] == "-" then
                         if param == "-a" then show_all = true
                         if param == "-p" then show_perms = true
                    else
                        ls_path = param
                    end if
                end for

            else if params.len == 0 then
                ls_path = main_dir
            else
                print "ls opt[-a] opt[-p] opt[path] - lists contents of given path or main dir"
                print " if -a then recursively lists all folders"
                print " if -p shows owner, owner group and permissions of all listed files)"
            end if
            ls(computer, ls_path, 0, show_all, show_perms)

        //groups
        else if cmd == "groups" then
            if params.len != 1 then 
                print "groups [username] -  Returns groups associated with an existing user on the computer"
            else 
                print computer.groups(params[0])
            end if
        
        //groupadd
        else if cmd == "groupadd" then
            if user != "root" then
                print "Insufficient perms for command"
                conf = user_input("continue(Y/n)").lower
                if conf != "n"then conf = true
            else if params.len != 2 then
                print "groupadd [username] [group] - Creates a new group associated with an existing user on the computer"
            else if conf then
                u_name = params[0]
                g_name = params[1]
                if computer.create_group(u_name. g_name) == null then
                    print "<color=orange>Failed to create group: Input error"
                end if
            end if

        //groupdel
        else if cmd == "groupdel" then
            if user != "root" then
                print "Insufficient perms for command"
                conf = user_input("continue(Y/n)").lower
                if conf != "n"then conf = true
            else if params.len != 2 then
                print "groupdel [username] [group] - Deletes an existing group associated with an existing user on the computer"
            else if conf then
                u_name = params[0]
                g_name = params[1]
                if computer.create_group(u_name. g_name) == null then
                    print "<color=orange>Failed to delete group: Input error"
                end if
            end if
        
        //ipinfo    
        else if cmd == "ipinfo" then
            if params.len != 0 then print "ipinfo - shows local ip, public ip, network gateway, active ports and network devices"
            router = get_router(computer.public_ip)
            print "   _______     ____     ___         _ "
            print "  /  _/ _ \   /  _/__  / _/__      (_)"
            print " _/ // ___/  _/ // _ \/ _/ _ \    _   "
            print "/___/_/     /___/_//_/_/ \___/   (_)  "
            print ""
            info = "[Public IP]: " + computer.public_ip + "\n"
            info = info + "[Network Gateway]: " + computer.network_gateway + "\n"
            info = info + "[Local IP]: " + computer.local_ip + "\n"
            print format_columns(info)
            info ="{Active Ports}" + "\n"
            info = info +  "Number Status Service" + "\n"
            ports = computer.get_ports
            for port in ports
                status = "open"
                if port.is_closed then status = "closed"
                info =  info + port.port_number + " " + status + " " + router.port_info(port) + "\n"
            end for
            print format_columns(info)
            info = "{Network Devices}" + "\n"
            info = info + "Name Chipset Monitor" + "\n"
            n_devices = computer.network_devices.split(char(10))
            for n_device in n_devices
                info = info + n_device + "\n"
            end for
            print format_columns(info)

        //iwlist
        else if cmd == "iwlist" then
            if params.len != 1 then 
                print "<b>iwlist [net device]"
            else
                devices = computer.network_devices
                if devices == null or devices.indexOf(params[0]) == null then exit("Input Error: Network device not found")
                if params[0].indexOf("eth") != null then exit("Input Error: ethernet cards not supported for this command")
                networks = computer.wifi_networks(params[0])
                if networks == null then 
                    print "<b>iwlist [net device]"
                else
                    info = "BSSID PWR ESSID"
                    for network in networks
	                    info = info + "\n" + network
                    end for
                    print(format_columns(info))
                end if
            end if

        //wifi
        else if cmd == "wifi" then
            if params.len != 3 then
                print "<b>Usage:</b> wifi [net_device] [bssid] [essid] [password] - connects to given wifi"
            else
                result = computer.connect_wifi(params[0], params[1], params[2], params[3])
                if typeof(result) == "string" then print result  
            end if
            
        //pass
        else if cmd == "pass" then 
            if (not computer.File("/etc/passwd")) or (not computer.File("/etc/passwd").has_permission("r")) then
                print "<b><color=orange>Error: No access to password file"
            else
                passfile = computer.File("/etc/passwd")
                start = indexOf(passfile.get_content, "root:")
                ending = indexOf(passfile.get_content, char(10))
                pass = passfile.get_content[start+5:ending]
                pass = crypto.decipher(pass)
                print "root:" + pass
            end if

        //mkdir
        else if cmd == "mkdir" then
            if params.len != 1 then
                print "<b>Usage:</b> mkdir [/path/to/new_dir/dir_name]/[dir_name] - creates new directory at given path or at current path"
            else if indexOf(params[0], "/") == null then
                dir_name = params[0]
                computer.create_folder(main_dir, dir_name)
            else
                sls = allIndexes(params[0], "/")
                lsl = sls[-1]
                dir_path = params[0][:lsl]
                dir_name = params[0][lsl+1:]
                computer.create_folder(dir_path, dir_name)
            end if
        
        //pwd
        else if cmd == "pwd" then
            print main_dir
        
        //chmod
        else if cmd == "chmod" then
            if params.len > 3 or params.len < 2 then
                print "<b>Usage:</b> chmod [file_path] [perms] [isRecursive=0]"
                print "<b>Example:</b> chmod /example/file g+wr 1"
            else 
                file = computer.File(params[0])
                if file == null then
                    print "<color=red>Error:File not found"
                else if params.len == 3 then
                    result = file.chmod(params[1], params[2])
                else
                    result = file.chmod(params[1], 0)
                end if
                print result
            end if
        

        //useradd
        else if cmd == "useradd" then
            if params.len != 2 then
                print "<b>Usage:</b> useradd [username] [password] - Creates a user on the computer"
            else
            result = computer.create_user()
            if result isa string then print result
            end if

        //userdel
        else if cmd == "userdel" then
            if params.len > 2 or params.len == 0 then
                print "<b>Usage:</b> userdel [username]"
                print "-h flag to delete home directory of user"
                print "<b>Example:</b>"
                print "    userdel Example_user -h"
            else
            removeHome = false
            if params.len == 2 and params[1] == "-h" then removeHome = true
            result = computer.delete_user(params[0], removeHome)
            if result and result isa string and result.len > 0 then print result
            end if
        
        //cp
        else if cmd == "cp" then
            if params.len > 3 or params.len < 2 then
                print "<b>Usage:</b> cp [file_path] [new_path] opt[new_name] - copies given file to given new path"
            else if params.len == 2 then
                o_file = computer.File(params[0])
                result = o_file.copy(params[1], o_file.name)
            else
                o_file = computer.File(params[0])
                result = o_file.copy(params[1], params[2])
            end if
            if result and result isa string and result.len > 0 then print result
        
        //rm
        else if cmd == "rm" then
            if params.len != 1 then
                print "<b>Usage:</b> rm [file_path] - delete the given file"
            else
                file = computer.File(params[0])
                result = file.delete
            end if
            if result and result isa string and result.len > 0 then print result

        //cat
        else if cmd == "cat" then
            if params.len != 1 then
                print "<b>Usage: </b>cat [file_path] - prints contents of  text file"
            else
                file = computer.File(params[0])
                content = file.get_content
                if content == null then
                    print "<color=orange>Error: can't read file"
                else
                    print content
                end if
            end if 


        //fail
        else print"<color=red>Error:Command not found"
        end if
    end while
end function

computer_interface(get_shell.host_computer)
//  ______   ______     __   __     __     ______   
// /\  == \ /\  ___\   /\ "-.\ \   /\ \   /\  ___\  
// \ \  _-/ \ \  __\   \ \ \-.  \  \ \ \  \ \___  \ 
//  \ \_\    \ \_____\  \ \_\\"\_\  \ \_\  \/\_____\
//   \/_/     \/_____/   \/_/ \/_/   \/_/   \/_____/